events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Configurações básicas
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Compressão
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=video:10m rate=5r/s;

    # Upstream para backend
    upstream backend {
        server backend:3000;
    }

    # Upstream para frontend
    upstream frontend {
        server frontend:3000;
    }

    # Servidor principal
    server {
        listen 80;
        server_name localhost;

        # Configuração para API
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Configuração para vídeos
        location /videos/ {
            limit_req zone=video burst=10 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers para streaming
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
            
            # Timeouts para streaming
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Configuração para arquivos estáticos de vídeo
        location /static/videos/ {
            alias /var/www/videos/;
            
            # Headers para streaming
            add_header Cache-Control "public, max-age=3600";
            add_header Accept-Ranges bytes;
            
            # Suporte a range requests
            location ~* \.(mp4|webm|ogg)$ {
                add_header Cache-Control "public, max-age=86400";
                add_header Accept-Ranges bytes;
            }
            
            # Suporte a HLS
            location ~* \.(m3u8|ts)$ {
                add_header Cache-Control "public, max-age=0";
                add_header Accept-Ranges bytes;
            }
        }

        # Configuração para frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Configuração para documentação da API
        location /docs/ {
            proxy_pass http://backend/api/docs/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Configuração para health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Configuração para HTTPS (opcional)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     # Mesmas configurações do servidor HTTP
    #     # ... (copiar todas as location blocks)
    # }
}
