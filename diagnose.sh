#!/bin/bash

# Script de diagn√≥stico para ServerTV
# Uso: ./diagnose.sh

echo "üîç Diagn√≥stico do ServerTV"
echo "========================="

# Verificar Docker
echo "üê≥ Verificando Docker..."
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker instalado: $(docker --version)"
else
    echo "‚ùå Docker n√£o instalado"
    exit 1
fi

if command -v docker-compose &> /dev/null; then
    echo "‚úÖ Docker Compose instalado: $(docker-compose --version)"
else
    echo "‚ùå Docker Compose n√£o instalado"
    exit 1
fi

# Verificar arquivos necess√°rios
echo ""
echo "üìÅ Verificando arquivos necess√°rios..."
required_files=(
    "docker-compose.yml"
    "backend/package.json"
    "frontend/package.json"
    "nginx/nginx.conf"
    "database/init.sql"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file n√£o encontrado"
    fi
done

# Verificar diret√≥rios
echo ""
echo "üìÇ Verificando diret√≥rios..."
required_dirs=(
    "backend"
    "frontend"
    "nginx"
    "database"
    "scripts"
)

for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo "‚úÖ $dir/"
    else
        echo "‚ùå $dir/ n√£o encontrado"
    fi
done

# Verificar status dos containers
echo ""
echo "üê≥ Verificando containers..."
if docker-compose ps &> /dev/null; then
    docker-compose ps
else
    echo "‚ùå Erro ao verificar containers"
fi

# Verificar logs de erro
echo ""
echo "üìã Verificando logs de erro..."
services=("postgres" "backend" "frontend" "nginx")

for service in "${services[@]}"; do
    echo "--- Logs do $service ---"
    if docker-compose logs --tail=5 $service 2>/dev/null | grep -i error; then
        echo "‚ùå Erros encontrados no $service"
    else
        echo "‚úÖ $service sem erros aparentes"
    fi
done

# Verificar portas
echo ""
echo "üåê Verificando portas..."
ports=(3000 3001 5432 80)
for port in "${ports[@]}"; do
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        echo "‚úÖ Porta $port est√° em uso"
    else
        echo "‚ö†Ô∏è  Porta $port n√£o est√° em uso"
    fi
done

# Verificar espa√ßo em disco
echo ""
echo "üíæ Verificando espa√ßo em disco..."
df -h | head -1
df -h | grep -E "(/$|/var|/tmp)"

# Verificar mem√≥ria
echo ""
echo "üß† Verificando mem√≥ria..."
if command -v free &> /dev/null; then
    free -h
else
    echo "‚ö†Ô∏è  Comando 'free' n√£o dispon√≠vel"
fi

# Verificar conectividade
echo ""
echo "üåê Verificando conectividade..."
if curl -s http://localhost:3000/api > /dev/null; then
    echo "‚úÖ API acess√≠vel"
else
    echo "‚ùå API n√£o acess√≠vel"
fi

if curl -s http://localhost:3001 > /dev/null; then
    echo "‚úÖ Frontend acess√≠vel"
else
    echo "‚ùå Frontend n√£o acess√≠vel"
fi

echo ""
echo "üîß Comandos √∫teis:"
echo "   docker-compose logs -f [servi√ßo]  # Ver logs de um servi√ßo"
echo "   docker-compose restart [servi√ßo] # Reiniciar um servi√ßo"
echo "   docker-compose down              # Parar todos os servi√ßos"
echo "   docker-compose up -d --build     # Reconstruir e iniciar"
